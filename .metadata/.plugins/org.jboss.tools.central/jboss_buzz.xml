<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Hot Rod per-cache configuration</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/r_Xx2PU_QCM/" /><category term="configuration" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="Hot Rod" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-hot_rod_per_cache_configuration</id><updated>2020-05-30T12:00:00Z</updated><published>2020-05-30T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Aside from being able to configure a Java Hot Rod client through a &lt;a href="https://infinispan.org/blog/"&gt;compact URI&lt;/a&gt; representation, Infinispan 11 brings some additional changes to remote cache configuration.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;While remote caches did have some client-side configuration, this was never implemented cleanly, resorting to multiple overloaded variations on the &lt;code&gt;getCache()&lt;/code&gt; method, for example to obtain a transactional cache, or enabling near-caching.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan 11 now allows specifying per-cache configuration both through the API and through the declarative properties file.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Let’s look at a few examples.&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;ConfigurationBuilder builder = &lt;span class="keyword"&gt;new&lt;/span&gt; ConfigurationBuilder() .uri(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;hotrod://127.0.0.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;); .remoteCache(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;closecache&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;) .nearCacheMode(NearCacheMode.INVALIDATED) .nearCacheMaxEntries(&lt;span class="integer"&gt;10000&lt;/span&gt;) .remoteCache(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;txcache&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;) .transactionMode(TransactionMode.NON_XA); RemoteCacheManager manager = &lt;span class="keyword"&gt;new&lt;/span&gt; RemoteCacheManager(builder.build());&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the above code snippet, we enable near-caching for the cache &lt;code&gt;closecache&lt;/code&gt; and we enable NON_XA transactions on the cache &lt;code&gt;txcache&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The equivalent &lt;code&gt;hotrod-client.properties&lt;/code&gt; file:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;infinispan.client.hotrod.uri=hotrod://127.0.0.1 infinispan.client.hotrod.cache.closecache.near_cache.mode=INVALIDATED infinispan.client.hotrod.cache.closecache.near_cache.max_entries=10000 infinispan.client.hotrod.cache.txcache.transaction.transaction_mode=NON_XA&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_automatic_cache_creation"&gt;&lt;a class="anchor" href="#_automatic_cache_creation" /&gt;Automatic cache creation&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A neat feature that has been implemented as part of per-cache configuration, is the ability to automatically create a cache on the server on first use, if it is missing, by supplying either an existing template or a full-blown configuration.&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;ConfigurationBuilder builder = &lt;span class="keyword"&gt;new&lt;/span&gt; ConfigurationBuilder() .uri(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;hotrod://127.0.0.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;); .remoteCache(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;mydistcache&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;) .templateName(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;org.infinispan.DIST_SYNC&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;); RemoteCacheManager manager = &lt;span class="keyword"&gt;new&lt;/span&gt; RemoteCacheManager(builder.build()); Cache&amp;lt;&lt;span class="predefined-type"&gt;String&lt;/span&gt;, &lt;span class="predefined-type"&gt;String&lt;/span&gt;&amp;gt; cache = manager.getCache(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;mydistcache&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;); ...&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The above example using a properties file would look like:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;infinispan.client.hotrod.uri=hotrod://127.0.0.1 infinispan.client.hotrod.cache.mydistcache.template=org.infinispan.DIST_SYNC&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/r_Xx2PU_QCM" height="1" width="1" alt=""/&gt;</content><summary>Aside from being able to configure a Java Hot Rod client through a compact URI representation, Infinispan 11 brings some additional changes to remote cache configuration. While remote caches did have some client-side configuration, this was never implemented cleanly, resorting to multiple overloaded variations on the getCache() method, for example to obtain a transactional cache, or enabling near-...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2020-05-30T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/05/30/hotrod-percache-configuration/</feedburner:origLink></entry><entry><title>Editoral 29 May 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/c2-NpgctxTs/editoral-29-may-2020" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="Teiid" scheme="searchisko:content:tags" /><author><name>lightguard</name></author><id>searchisko:content:id:jbossorg_blog-editoral_29_may_2020</id><updated>2020-05-29T20:06:43Z</updated><published>2020-05-29T20:06:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:adca4ca5-fd99-4a6b-8996-922bda42fc1b] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;div&gt;&lt;div&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Welcome back! Things keep rolling along for us within Middleware at Red Hat. We have a couple of new releases and some blogs to talk about this week, so let&amp;#8217;s dig in.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;Releases&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;div class="sectionbody"&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://infinispan.org/blog/2020/05/25/infinispan-11/" rel="nofollow"&gt;Infinispan 11.0.0.0.CR1&lt;/a&gt; - This CR release sees non-blocking internal changes, a non-blocking Store SPI, slight modifications to clustering scaling, better/more server security, CLI, kubernetes/OpenShift operator, and an update to documentation!&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://github.com/quarkusio/quarkus/milestone/68?closed=1" rel="nofollow"&gt;Quarkus 1.5.0.Final&lt;/a&gt; - The milestoe is done and the artifacts are in Maven Central. There are a few things left to do to offically announce the release, but all the coding is done. The link here is to the GitHub milestone for a list of issues completed.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://teiid.blogspot.com/2020/05/teiid-spring-boot-150-released.html" rel="nofollow"&gt;Teiid Spring Boot 1.5.0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;Blogs&lt;/h2&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To go along with the Infinispan release, a couple of new blog posts have come out:&lt;/p&gt;&lt;/div&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://infinispan.org/blog/2020/05/28/cli/" rel="nofollow"&gt;CLI enhancements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://infinispan.org/blog/2020/05/26/hotrod-uri/" rel="nofollow"&gt;Hot Rod URI&lt;/a&gt;, so you can connect via Hot Rod the same way you would a JDBC datastore.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Eric Schabell has a couple of entries into his Cloud-native development series:&lt;/p&gt;&lt;/div&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" rel="nofollow"&gt;A Blueprint&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/05/cloud-native-development-common-architectural-elements.html" rel="nofollow"&gt;Common Architectural Elements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;There is also an entry called &lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/05/reality-bites-3-misconceptions-can-lead-to-micorservice-mayhem-slides.html" rel="nofollow"&gt;Reality Bites: 3 misconceptions that can lead to microservice mayhem&lt;/a&gt; discussing pitfalls to avoid while working with Microservices&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Lastly, we want to cover episodes 2, 3, and 4 of the Quarkus Insights video podcast. Episode 2 covers &lt;code&gt;quarkus:dev&lt;/code&gt; and Command mode. Episode 3 discusses Hibernate and Panache. The most recent one, episode 4, talks about JHipster for Quarkus. You can find these video pod casts at &lt;a class="jive-link-external-small" href="https://www.youtube.com/playlist?list=PLsM3ZE5tGAVZ5p_CTx5YPLdMbyjlzfj8y" rel="nofollow"&gt;YouTube&lt;/a&gt; or the audio on Apple Podcasts and Spotify.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:adca4ca5-fd99-4a6b-8996-922bda42fc1b] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/c2-NpgctxTs" height="1" width="1" alt=""/&gt;</content><summary>Welcome back! Things keep rolling along for us within Middleware at Red Hat. We have a couple of new releases and some blogs to talk about this week, so let’s dig in. Releases   Infinispan 11.0.0.0.CR1 - This CR release sees non-blocking internal changes, a non-blocking Store SPI, slight modifications to clustering scaling, better/more server security, CLI, kubernetes/OpenShift operator, and an up...</summary><dc:creator>lightguard</dc:creator><dc:date>2020-05-29T20:06:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2020/05/29/editoral-29-may-2020</feedburner:origLink></entry><entry><title>Red Hat Software Collections 3.5 brings updates for Red Hat Enterprise Linux 7</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/DWDOIUO5G9E/" /><category term="C" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="Clang/LLVM" scheme="searchisko:content:tags" /><category term="compilers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Go" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="perl" scheme="searchisko:content:tags" /><category term="php" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="Python" scheme="searchisko:content:tags" /><category term="Red Hat Developer Toolset" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="rhel 6" scheme="searchisko:content:tags" /><category term="RHEL 7" scheme="searchisko:content:tags" /><category term="Ruby" scheme="searchisko:content:tags" /><author><name>Bob Davis</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_software_collections_3_5_brings_updates_for_red_hat_enterprise_linux_7</id><updated>2020-05-29T18:59:44Z</updated><published>2020-05-29T18:59:44Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/red-hat-software-collections-35-and-red-hat-developer-toolset-91-now-generally-available"&gt;Red Hat Software Collections 3.5 and Red Hat Developer Toolset 9.1&lt;/a&gt; are now available for Red Hat Enterprise Linux 7. Here’s what that means for developers.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/softwarecollections/overview"&gt;Red Hat Software Collections (RHSCL)&lt;/a&gt; is how we distribute the latest stable versions of various runtimes and languages through &lt;a href="https://developers.redhat.com/products/rhel/overview"&gt;Red Hat Enterprise Linux (RHEL)&lt;/a&gt; 7, with some components available in RHEL 6. RHSCL also contains the Red Hat Developer Toolset, which is the set of tools we curate for &lt;a href="https://developers.redhat.com/topics/c/"&gt;C/C++&lt;/a&gt; and Fortran. &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/support/policy/updates/rhscl-rhel7"&gt;These components are supported for up to five years&lt;/a&gt;, which helps you build apps that have a long lifecycle as well.&lt;/p&gt; &lt;p&gt;&lt;span id="more-725967"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What changed?&lt;/h2&gt; &lt;p&gt;Updated collections in RHSCL 3.5 include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Python 3.8&lt;/b&gt;, which introduces assignment expressions and several optimizations to make Python 3.8 run faster than previous versions, and with previous version compatibility to ease upgrade strategies.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Ruby 2.7&lt;/b&gt;, which offers a large number of new features such as pattern matching, Read-Eval-Print-Loop (REPL) improvements, and compaction garbage collection (GC) for fragmented memory spaces.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Perl 5.30&lt;/b&gt;, which adds new features for developers such as the limited variable-length lookbehinds, Unicode 12.1, faster string interpolation, and other performance improvements.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Apache httpd 2.4&lt;/b&gt; (update), which fixes a number of bugs and includes an updated version of &lt;code&gt;mod_md&lt;/code&gt; to support ACMEv2.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Varnish 6&lt;/b&gt;, which updates Varnish Cache to version 6.0.6, the latest bi-annual fresh release with numerous bug fixes and performance improvements.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Java Mission Control 7.1&lt;/b&gt;, which updates JDK Mission Control to version 7.1.1 and fixes numerous bugs. It also adds key enhancements, including multiple rule optimizations, a new JOverflow view based on Standard Widget Toolkit (SWT), a new flame graph view, and a new latency visualization using the High Dynamic Range (HDR) Histogram.&lt;/li&gt; &lt;li&gt;&lt;b&gt;HAProxy 1.8.24&lt;/b&gt;, which provides multiple bug and security fixes.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The last—but certainly not least—update to Red Hat Software Collections 3.5 is Red Hat Developer Toolset (DTS) version 9.1, which is the set of tools we curate for C/C++ and Fortran. For DTS, we updated the compilers, debuggers, and performance monitoring tools to ensure the best experience for software developers using these languages. At the center of DTS 9.1 is GCC 9.3, which brings a huge number of improvements including improved diagnostics and useability. The &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/9/html/9.1_release_notes/dts9.1_release#Features"&gt;full list of tools that we updated in DTS 9.1 is available in the release notes&lt;/a&gt;, as always.&lt;/p&gt; &lt;h2&gt;How do I get this great stuff?&lt;/h2&gt; &lt;p&gt;With a &lt;a href="https://developers.redhat.com/articles/getting-red-hat-developer-subscription-what-rhel-users-need-know/"&gt;Red Hat Developer Subscription&lt;/a&gt;, you have access to &lt;a href="https://developers.redhat.com/products/rhel/download"&gt;Red Hat Enterprise Linux 7&lt;/a&gt;, where you can update these packages. If you have already enabled Red Hat Software Collections in the subscription manager, follow the instructions below for either a specific software collection or a container image. If you haven’t already enabled RHSCLs, please &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3/html/3.5_release_notes/chap-installation"&gt;follow the instructions in our online documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To install a specific software collection, type the following into your command line as root:&lt;/p&gt; &lt;pre&gt;$ yum install &lt;i&gt;software_collection…&lt;/i&gt;&lt;/pre&gt; &lt;p&gt;Replace &lt;code&gt;software_collection&lt;/code&gt; with a space-separated list of the software collections you want to install. For example, to install &lt;code&gt;php54&lt;/code&gt; and &lt;code&gt;rh-mariadb100&lt;/code&gt;, type as root:&lt;/p&gt; &lt;pre&gt;$ yum install rh-php72 rh-mariadb102&lt;/pre&gt; &lt;p&gt;Doing this installs the main meta-package for the selected software collection and a set of required packages as its dependencies. For information on how to install other packages such as additional modules, see &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3/html/3.5_release_notes/chap-Installation#sect-Installation-Install-Optional"&gt;Section 2.2.2, “Installing Optional Packages.”&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Another option, of course, is to start with our &lt;a target="_blank" rel="nofollow" href="https://catalog.redhat.com/software/containers/explore"&gt;container images for these packages&lt;/a&gt;, which make it easier to build and deploy mission-critical applications that use these components for Red Hat Enterprise Linux and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Red Hat OpenShift&lt;/a&gt; platforms.&lt;/p&gt; &lt;p&gt;The full&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3/html/3.5_release_notes/index"&gt; release notes for Red Hat Software Collections 3.5&lt;/a&gt; and &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/9/html/9.1_release_notes/index"&gt;Red Hat Developer Toolset 9.1&lt;/a&gt; are available in the customer portal.&lt;/p&gt; &lt;h2&gt;What about Red Hat Enterprise Linux 8?&lt;/h2&gt; &lt;p&gt;Software Collections are for Red Hat Enterprise Linux 7. Red Hat Enterprise Linux 8 is managed in a different way through &lt;a href="https://developers.redhat.com/blog/2018/11/15/rhel8-introducing-appstreams/"&gt;Application Streams&lt;/a&gt;, and you can find updated RHEL 8 packages in the RHEL8 &lt;code&gt;appstream&lt;/code&gt; repository. The updates for these packages might not be the same for Red Hat Enterprise Linux 8 Application Streams, so please check on the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/support/policy/updates/rhel8-app-streams-life-cycle"&gt;Application Streams Life Cycle&lt;/a&gt; page.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#038;title=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" data-a2a-url="https://developers.redhat.com/blog/2020/05/29/red-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7/" data-a2a-title="Red Hat Software Collections 3.5 brings updates for Red Hat Enterprise Linux 7"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/29/red-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7/"&gt;Red Hat Software Collections 3.5 brings updates for Red Hat Enterprise Linux 7&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/DWDOIUO5G9E" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Software Collections 3.5 and Red Hat Developer Toolset 9.1 are now available for Red Hat Enterprise Linux 7. Here’s what that means for developers. Red Hat Software Collections (RHSCL) is how we distribute the latest stable versions of various runtimes and languages through Red Hat Enterprise Linux (RHEL) 7, with some components available in RHEL 6. RHSCL also contains the Red Hat Develope...</summary><dc:creator>Bob Davis</dc:creator><dc:date>2020-05-29T18:59:44Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/29/red-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7/</feedburner:origLink></entry><entry><title>Debugging vHost user TX contention in Open vSwitch</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/O3UR4BG0j7s/" /><category term="devops" scheme="searchisko:content:tags" /><category term="dpdk" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Open vSwitch" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="virtual machine" scheme="searchisko:content:tags" /><category term="windows" scheme="searchisko:content:tags" /><author><name>David Marchand</name></author><id>searchisko:content:id:jbossorg_blog-debugging_vhost_user_tx_contention_in_open_vswitch</id><updated>2020-05-29T07:00:12Z</updated><published>2020-05-29T07:00:12Z</published><content type="html">&lt;p&gt;It isn&amp;#8217;t always easy to understand how &lt;a target="_blank" rel="nofollow" href="https://github.com/openvswitch/ovs"&gt;Open vSwitch (OVS)&lt;/a&gt; cycles are spent, especially because various parameters and configuration options can affect how OVS behaves. Members of the Open vSwitch community are actively working to understand what causes packets drops in Open vSwitch. Efforts so far have included &lt;a target="_blank" rel="nofollow" href="https://github.com/openvswitch/ovs/commit/c161357d5d96"&gt;adding a custom statistic for vHost TX retries&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://github.com/openvswitch/ovs/commit/9ff24b9c9323"&gt;tracking vHost TX contention&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://github.com/openvswitch/ovs/commit/3d56e4ac445d"&gt;adding a coverage counter to count vHost IRQs&lt;/a&gt;. We are particularly interested in the user space datapath that uses the Data Plane Development Kit (DPDK) for fast I/O.&lt;/p&gt; &lt;p&gt;Adding these statistics is an ongoing effort, and we won&amp;#8217;t cover all of the corners. In some cases, the statistics leave doubts about what is causing a behavior.&lt;/p&gt; &lt;p&gt;In this article, I will introduce a new counter we&amp;#8217;ve added to learn more about contention in the vHost transmission path. I&amp;#8217;ll also show you how to use the new counter with &lt;code&gt;perf&lt;/code&gt;, and I&amp;#8217;ll discuss what&amp;#8217;s next for our ongoing efforts.&lt;/p&gt; &lt;p&gt;&lt;span id="more-707617"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The test environment for reproducing contention&lt;/h2&gt; &lt;p&gt;In this section, we&amp;#8217;ll set up a test environment to reproduce contention in the vHost transmission path. Our reference system is running Red Hat Enterprise Linux (RHEL) 7.7 with &lt;code&gt;openvswitch2.11-2.11.0-35.el7fdp.x86_64&lt;/code&gt;. You can skip this section if your environment is set up and running already.&lt;/p&gt; &lt;h3&gt;Configuring OVS&lt;/h3&gt; &lt;p&gt;Assuming you have Red Hat Enterprise Linux 7.7 already running in your system, you can configure OVS with a single bridge that has two plugged-in physical ports and two &lt;code&gt;vhost-user-client&lt;/code&gt; ports.&lt;/p&gt; &lt;p&gt;The physical ports are connected to a &lt;a target="_blank" rel="nofollow" href="https://trex-tgn.cisco.com/"&gt;TRex Realistic Traffic Generator&lt;/a&gt;. The traffic generator will send a unidirectional flow of packets to the bridge, passed to the &lt;code&gt;vhost-user-clients&lt;/code&gt; ports. We&amp;#8217;ve crafted these packets to send traffic to both queues of the first physical port on the OVS side. The &lt;code&gt;vhost-user-clients&lt;/code&gt; ports are connected to a virtual machine (VM) that sends the packets back using &lt;code&gt;testpmd&lt;/code&gt; in &lt;code&gt;io forward&lt;/code&gt; mode.&lt;/p&gt; &lt;p&gt;If you need more details about setting up a TRex traffic generator, configuring a host running OVS, or other aspects of this setup, see Eelco Chaudron&amp;#8217;s introduction to &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2017/09/28/automated-open-vswitch-pvp-testing/"&gt;Automated Open vSwitch PVP testing&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &lt;h3&gt;Configuring the bridge and host&lt;/h3&gt; &lt;p&gt;The setup in the ASCII diagram here differs slightly from the Physical interface to Virtual interface back to Physical interface (PVP) setup shown in the linked article above.&lt;/p&gt; &lt;pre&gt;+------+ +-----+ +---------+ | | | | | | | 0+---+1 4+---+0 | | tgen | | ovs | | testpmd | | 1+---+2 5+---+1 | | | | | | | +------+ +-----+ +---------+ &lt;/pre&gt; &lt;p&gt;Configure the bridge on the host as follows:&lt;/p&gt; &lt;pre&gt;# ovs-vsctl set Open_vSwitch . other_config:dpdk-init=true # ovs-vsctl set Open_vSwitch . other_config:pmd-cpu-mask=0x00008002 # ovs-vsctl add-br br0 -- set bridge br0 datapath_type=netdev # ovs-vsctl add-port br0 dpdk0 -- \ set Interface dpdk0 type=dpdk -- \ set Interface dpdk0 options:dpdk-devargs=0000:01:00.0 -- \ set Interface dpdk0 ofport_request=1 -- \ set Interface dpdk0 options:n_rxq=2 # ovs-vsctl add-port br0 dpdk1 -- \ set Interface dpdk1 type=dpdk -- \ set Interface dpdk1 options:dpdk-devargs=0000:01:00.1 -- \ set Interface dpdk1 ofport_request=2 -- \ set Interface dpdk1 options:n_rxq=2 # ovs-vsctl add-port br0 vhost0 -- \ set Interface vhost0 type=dpdkvhostuserclient -- \ set Interface vhost0 options:vhost-server-path="/tmp/vhost-sock0" -- \ set Interface vhost0 ofport_request=4 # ovs-vsctl add-port br0 vhost1 -- \ set Interface vhost1 type=dpdkvhostuserclient -- \ set Interface vhost1 options:vhost-server-path="/tmp/vhost-sock1" -- \ set Interface vhost1 ofport_request=5 &lt;/pre&gt; &lt;p&gt;Check the polling configuration:&lt;/p&gt; &lt;pre&gt;# ovs-appctl dpif-netdev/pmd-rxq-show pmd thread numa_id 0 core_id 1: isolated : false port: dpdk0 queue-id: 0 pmd usage: NOT AVAIL port: dpdk1 queue-id: 1 pmd usage: NOT AVAIL port: vhost0 queue-id: 0 pmd usage: NOT AVAIL pmd thread numa_id 0 core_id 15: isolated : false port: dpdk0 queue-id: 1 pmd usage: NOT AVAIL port: dpdk1 queue-id: 0 pmd usage: NOT AVAIL port: vhost1 queue-id: 0 pmd usage: NOT AVAIL &lt;/pre&gt; &lt;p&gt;We could let this OVS bridge with a &lt;code&gt;NORMAL&lt;/code&gt; action, in which case it would behave like a standard switch learning Media Access Control (MAC) addresses on its ports. To simplify the setup, let&amp;#8217;s just write a few OpenFlow rules for a basic mapping:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Receiving on the physical port &lt;code&gt;dpdk0&lt;/code&gt; pushes packets to &lt;code&gt;vhost0&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Receiving on the physical port &lt;code&gt;vhost0&lt;/code&gt; pushes packets to &lt;code&gt;dpdk0&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Receiving on the physical port &lt;code&gt;dpdk1&lt;/code&gt; pushes packets to &lt;code&gt;vhost1&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Receiving on the physical port &lt;code&gt;vhost1&lt;/code&gt; pushes packets to &lt;code&gt;dpdk1&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here&amp;#8217;s that mapping:&lt;/p&gt; &lt;pre&gt;# ovs-ofctl del-flows br0 # ovs-ofctl add-flow br0 in_port=1,actions=4 # ovs-ofctl add-flow br0 in_port=4,actions=1 # ovs-ofctl add-flow br0 in_port=2,actions=5 # ovs-ofctl add-flow br0 in_port=5,actions=2 &lt;/pre&gt; &lt;p&gt;That completes the test environment.&lt;/p&gt; &lt;h2&gt;Catching vHost TX contention&lt;/h2&gt; &lt;p&gt;Now let&amp;#8217;s take a look at the new coverage counter for OVS:&lt;/p&gt; &lt;pre&gt;# ovs-appctl coverage/show |grep vhost vhost_tx_contention 39082.8/sec 11553.017/sec 192.5503/sec total: 758359 &lt;/pre&gt; &lt;h3&gt;Adding a perf probe&lt;/h3&gt; &lt;p&gt;As it is, the counter leaves the question of which cores are impacted by contention. We can use &lt;code&gt;perf&lt;/code&gt; to catch more information without stopping OVS. Just add a probe in the branch where the contention occurs:&lt;/p&gt; &lt;pre&gt;# perf probe -x $(which ovs-vswitchd) 'netdev_dpdk_vhost_tx_lock=__netdev_dpdk_vhost_send:22 netdev-&amp;#62;name:string qid' Added new event: probe_ovs:netdev_dpdk_vhost_tx_lock (on __netdev_dpdk_vhost_send:22 in /usr/sbin/ovs-vswitchd with name=netdev-&amp;#62;name:string qid) &lt;/pre&gt; &lt;p&gt;Now you can use the counter in all of your &lt;code&gt;perf&lt;/code&gt; tools.&lt;/p&gt; &lt;h3&gt;Using the coverage counter in perf&lt;/h3&gt; &lt;p&gt;Here, we ask &lt;code&gt;perf&lt;/code&gt; to record a specific event:&lt;/p&gt; &lt;pre&gt;# perf record -e probe_ovs:netdev_dpdk_vhost_tx_lock -aR sleep 1 [ perf record: Woken up 15 times to write data ] [ perf record: Captured and wrote 3.938 MB perf.data (44059 samples) ] &lt;/pre&gt; &lt;p&gt;We can also make a report of this &lt;code&gt;perf&lt;/code&gt; session:&lt;/p&gt; &lt;pre&gt;# perf report -F +pid --stdio # To display the perf.data header info, please use --header/--header-only options. # # # Total Lost Samples: 0 # # Samples: 44K of event 'probe_ovs:netdev_dpdk_vhost_tx_lock' # Event count (approx.): 44059 # # Overhead Pid:Command Trace output # ........ ............... .................................. # 61.30% 33003:pmd60 (55ef4abe5494) name="vhost0" qid=0 38.70% 33006:pmd61 (55ef4abe5494) name="vhost0" qid=0 # # (Tip: For a higher level overview, try: perf report --sort comm,dso) # &lt;/pre&gt; &lt;p&gt;The new coverage counter makes interpreting contention easier. We can see that the contention happened between &lt;code&gt;pmd60&lt;/code&gt; (on core 1, by looking at the OVS logs) and &lt;code&gt;pmd61&lt;/code&gt; (on core 15). Both &lt;code&gt;pmd&lt;/code&gt; threads are trying to send packets on the &lt;code&gt;vhost0&lt;/code&gt; port queue zero.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Using &lt;code&gt;perf&lt;/code&gt; to debug contention is interesting, and it worked in this case because we were trying to catch events on an error or slow path. But &lt;code&gt;perf&lt;/code&gt; involves context switches that have a visible effect on performance. We can&amp;#8217;t use it without accounting for the performance impact.&lt;/p&gt; &lt;p&gt;Even if it&amp;#8217;s fine for developers to put in a probe by reading the code sources, support or operations teams will prefer higher-level tools or traces. The DPDK community has &lt;a target="_blank" rel="nofollow" href="http://inbox.dpdk.org/dev/20200318190241.3150971-1-jerinj@marvell.com/"&gt;started a workgroup&lt;/a&gt; to set traces with a minimal impact at key places in the DPDK infrastructure code. We are still far from something as rich as &lt;code&gt;perf&lt;/code&gt;, but this is likely to be a focus for part of the community for the next year.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#038;title=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" data-a2a-url="https://developers.redhat.com/blog/2020/05/29/debugging-vhost-user-tx-contention-in-open-vswitch/" data-a2a-title="Debugging vHost user TX contention in Open vSwitch"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/29/debugging-vhost-user-tx-contention-in-open-vswitch/"&gt;Debugging vHost user TX contention in Open vSwitch&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/O3UR4BG0j7s" height="1" width="1" alt=""/&gt;</content><summary>It isn’t always easy to understand how Open vSwitch (OVS) cycles are spent, especially because various parameters and configuration options can affect how OVS behaves. Members of the Open vSwitch community are actively working to understand what causes packets drops in Open vSwitch. Efforts so far have included adding a custom statistic for vHost TX retries, tracking vHost TX contention, and addin...</summary><dc:creator>David Marchand</dc:creator><dc:date>2020-05-29T07:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/29/debugging-vhost-user-tx-contention-in-open-vswitch/</feedburner:origLink></entry><entry><title>CLI enhancements</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6th486E5O58/" /><category term="Administration" scheme="searchisko:content:tags" /><category term="cli" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="logging" scheme="searchisko:content:tags" /><category term="management" scheme="searchisko:content:tags" /><category term="server" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-cli_enhancements</id><updated>2020-05-30T06:01:49Z</updated><published>2020-05-28T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One of the key aspects of our new server architecture is the management API exposed through the single port.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;While I’m sure there will be those of you who like to write scripts with plenty of &lt;code&gt;curl/wget&lt;/code&gt; magic, and those who prefer the comfort of our new web console, the Infinispan CLI offers a powerful tool which combines the power of the former with the usability of the latter.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;During the Infinispan 11 development cycle, the CLI has received numerous enhancements. Let’s look at some of them !&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_user_management"&gt;&lt;a class="anchor" href="#_user_management" /&gt;User management&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When using the built-in properties-based security realm, you had to use the &lt;code&gt;user-tool&lt;/code&gt; script to manage users, passwords and groups. That functionality has now been built into the CLI:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;[disconnected]&amp;gt; user create --password=secret --groups=admin john [disconnected]&amp;gt; connect --username=joe --password=secret [infinispan-29934@cluster//containers/default]&amp;gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_remote_logging_configuration"&gt;&lt;a class="anchor" href="#_remote_logging_configuration" /&gt;Remote logging configuration&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can now modify the server logging configuration from the CLI. For example, to enable TRACE logging for the &lt;code&gt;org.jgroups&lt;/code&gt; category, use the following:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;[infinispan-29934@cluster//containers/default]&amp;gt; logging set --level=TRACE org.jgroups&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="admonitionblock note"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-note" title="Note" /&gt; &lt;/td&gt; &lt;td class="content"&gt; logging configuration changes are volatile, i.e. they will be lost when restarting a node. &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_server_report"&gt;&lt;a class="anchor" href="#_server_report" /&gt;Server report&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To help with debugging issues, the server now implements an aggregate log which includes information such as a thread dump, memory configuration, open sockets/files, etc.&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;[bespin-29934@cluster//containers/default]&amp;gt; server report Downloaded report 'infinispan-bespin-29934-20200522114559-report.tar.gz'&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="admonitionblock note"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-note" title="Note" /&gt; &lt;/td&gt; &lt;td class="content"&gt; this feature currently only works on Linux/Unix systems. &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_real_cli_mode"&gt;&lt;a class="anchor" href="#_real_cli_mode" /&gt;Real CLI mode&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It is now possible to invoke all CLI commands directly from the command-line, without having to resort to interactive mode or a batch. For example:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;cli.sh user create --password=secret --groups=admin john&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_native_cli"&gt;&lt;a class="anchor" href="#_native_cli" /&gt;Native CLI&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The CLI can now be built as a native executable, courtesy of &lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt;'s &lt;code&gt;native-image&lt;/code&gt; tool. We will soon be shipping binaries/images of this, so look out for an announcement.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6th486E5O58" height="1" width="1" alt=""/&gt;</content><summary>One of the key aspects of our new server architecture is the management API exposed through the single port. While I’m sure there will be those of you who like to write scripts with plenty of curl/wget magic, and those who prefer the comfort of our new web console, the Infinispan CLI offers a powerful tool which combines the power of the former with the usability of the latter. During the Infinisp...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2020-05-28T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/05/28/cli/</feedburner:origLink></entry><entry><title>Quarkus, a Kubernetes-native Java runtime, now fully supported by Red Hat</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/XMTvt8ZxM4I/" /><category term="Cloud Native" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="kubernetes-native" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="reactive programming" scheme="searchisko:content:tags" /><author><name>jebeck</name></author><id>searchisko:content:id:jbossorg_blog-quarkus_a_kubernetes_native_java_runtime_now_fully_supported_by_red_hat</id><updated>2020-05-28T07:00:56Z</updated><published>2020-05-28T07:00:56Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; was introduced 25 years ago, and to this day, remains one of the most popular programming languages among developers. However, Java has developed a reputation for not being a good fit for &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/topics/cloud-native-apps"&gt;cloud-native applications&lt;/a&gt;. Developers look for (and often choose) alternative frameworks such as Go and &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt; to support their cloud-native development requirements.&lt;/p&gt; &lt;p&gt;Why learn another language when you can use your existing skills? &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; allows Java developers to leverage their expertise to develop cloud-native, &lt;a href="https://developers.redhat.com/topics/event-driven/"&gt;event-driven&lt;/a&gt;, &lt;a href="https://developers.redhat.com/coderland/reactive/"&gt;reactive&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;serverless&lt;/a&gt; applications. Quarkus provides a cohesive Java platform that feels familiar but new at the same time. Not only does it leverage existing Java standards, but it also provides a number of features that optimize developer joy, including live coding, unified configuration, IDE plugins, and more.&lt;/p&gt; &lt;p&gt;Recently, &lt;a href="https://www.redhat.com/en/about/press-releases/red-hat-advances-java-kubernetes-delivers-quarkus-fully-supported-runtime-cloud-native-development?source=pressreleaselisting"&gt;Red Hat announced support for Quarkus&lt;/a&gt;. With Quarkus, Red Hat advances Java on &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; and bridges the gap between traditional Java applications and cloud-native environments.&lt;/p&gt; &lt;p&gt;&lt;span id="more-725657"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What is Quarkus?&lt;/h2&gt; &lt;p&gt;Quarkus is more than just a runtime. It is a Kubernetes-native Java stack for building fast, lightweight microservices and serverless applications. It is purpose-built to capitalize on the benefits of cloud-native applications. Quarkus delivers significant runtime efficiencies for applications deployed on Kubernetes with fast startup times, low memory utilization, and small image footprints.&lt;/p&gt; &lt;h2&gt;A modern Java stack&lt;/h2&gt; &lt;p&gt;One of the founding principles of &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/"&gt;the Quarkus project&lt;/a&gt; was to &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/vision/developer-joy"&gt;bring developer joy to enterprise Java developers&lt;/a&gt;. What does that mean, and how does Quarkus bring joy?&lt;/p&gt; &lt;h3&gt;Kubernetes-native Java&lt;/h3&gt; &lt;p&gt;Quarkus is a &lt;a href="https://developers.redhat.com/blog/2020/04/08/why-kubernetes-native-instead-of-cloud-native/"&gt;Kubernetes-native&lt;/a&gt; Java framework targeted for containers and serverless due to its fast startup, low memory, and small application size.&lt;/p&gt; &lt;h3&gt;Developer joy&lt;/h3&gt; &lt;p&gt;Quarkus works out of the box with popular Java standards, frameworks, and libraries. Developers familiar with these will &lt;a href="https://developers.redhat.com/blog/2019/10/24/bring-joy-to-development-with-quarkus-the-cloud-native-java-framework/"&gt;feel at home with Quarkus&lt;/a&gt;, which streamlines code for 80% of common use cases while providing the flexibility to cover the remaining 20%.&lt;/p&gt; &lt;p&gt;Quarkus also provides live coding for fast iteration during development, where code changes are automatically and immediately reflected in the running app.&lt;/p&gt; &lt;h3&gt;Unified imperative and reactive programming models&lt;/h3&gt; &lt;p&gt;Developers can choose &lt;a href="https://developers.redhat.com/blog/2019/11/18/how-quarkus-brings-imperative-and-reactive-programming-together/"&gt;the right programming model&lt;/a&gt; that best fits their use case, and easily integrate their code with other components in a reactive system—like reactive streams—with &lt;a target="_blank" rel="nofollow" href="https://vertx.io/"&gt;Vert.x&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://kafka.apache.org/"&gt;Kafka&lt;/a&gt;, reactive database APIs, and much more.&lt;/p&gt; &lt;h3&gt;90 standards and libraries&lt;/h3&gt; &lt;p&gt;The Quarkus community has developed &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/extensions/"&gt;over 90 extensions&lt;/a&gt; that provide additional enhancements and integrations to the framework, including the ability to compile an application into a native executable.&lt;/p&gt; &lt;h2&gt;&lt;b&gt;How does it work?&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Traditional Java stacks are optimized for monolithic applications where lots of work occurs when the application is started. This dynamic behavior creates unnecessary overhead in a Kubernetes environment where containers are scaled up or down quickly with relatively short lifespans. Quarkus moves as much of that processing to the build phase such as optimizing library frameworks, minimizing dependencies, and eliminating unused code to greatly reduce startup time and the memory needs of the application. &lt;/p&gt; &lt;p&gt;Developers can choose to deploy their applications in JVM mode or compiled and run in native mode. Both delivery modes provide significant performance improvements versus traditional java stacks. &lt;/p&gt; &lt;h2&gt;Why choose the Red Hat build of Quarkus?&lt;/h2&gt; &lt;p&gt;Red Hat has long been a leader in the Java community and remains committed to moving it forward through open, community-driven innovation. With the &lt;a href="https://developers.redhat.com/products/quarkus/overview"&gt;Red Hat build of Quarkus&lt;/a&gt;, developers are getting a fully supported technology that includes an active community, continuous updates, and a fast release cadence. Quarkus is advancing quickly and Red Hat is committed to supporting developers as they adopt, deploy, and maintain Kubernetes-native Java applications.&lt;/p&gt; &lt;p&gt;Quarkus support is available via &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/products/runtimes"&gt;Red Hat Runtimes&lt;/a&gt;, which provides top integrated products, migration tools, and components to create cloud-native applications while also speeding up development and delivery time. Red Hat Runtimes offers developers and architects the choice of the right tool for the right task through a collection of lightweight runtimes and frameworks for highly-distributed cloud architectures—like microservices—with in-memory caching for fast data access, and messaging for quick data transfer between existing applications.&lt;/p&gt; &lt;p&gt;Quarkus uses an extension framework that creates a vibrant ecosystem to integrate with other &lt;a href="https://developers.redhat.com/middleware/"&gt;Red Hat Middleware&lt;/a&gt; products such as &lt;a href="https://developers.redhat.com/products/amq/overview"&gt;Red Hat AMQ Streams&lt;/a&gt; (Kafka), &lt;a href="https://developers.redhat.com/products/fuse/overview"&gt;Red Hat Fuse&lt;/a&gt; (Camel K), and &lt;a href="https://developers.redhat.com/products/rhpam/overview"&gt;Red Hat Process Automation Manager&lt;/a&gt; (Kogito).&lt;/p&gt; &lt;p&gt;Quarkus is also optimized to run on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; providing an ideal hybrid-cloud application development environment for scalable, fast, and lightweight applications. Using Red Hat OpenShift and a cloud-native development toolchain including Quarkus, developers can significantly increase their productivity and ability to drive innovation.&lt;/p&gt; &lt;h2&gt;Red Hat support&lt;/h2&gt; &lt;p&gt;With a Red Hat subscription, you have access to a global network of the most experienced, motivated, and knowledgeable &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Linux&lt;/a&gt;, Kubernetes, and middleware support engineers. They can virtually extend your in-house expertise as you develop on Red Hat enterprise products. Support engineers are here to help you with advice and guidance throughout the development process.&lt;/p&gt; &lt;h2&gt;Additional resources&lt;/h2&gt; &lt;p&gt;Check out these resources for getting started with Red Hat&amp;#8217;s build of Quarkus:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://code.quarkus.redhat.com/"&gt;Start Coding&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_build_of_quarkus/1.3/"&gt;Documentation&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/4966181"&gt;Supported Configurations&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/"&gt;Participate&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#038;title=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" data-a2a-url="https://developers.redhat.com/blog/2020/05/28/quarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat/" data-a2a-title="Quarkus, a Kubernetes-native Java runtime, now fully supported by Red Hat"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/28/quarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat/"&gt;Quarkus, a Kubernetes-native Java runtime, now fully supported by Red Hat&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/XMTvt8ZxM4I" height="1" width="1" alt=""/&gt;</content><summary>Java was introduced 25 years ago, and to this day, remains one of the most popular programming languages among developers. However, Java has developed a reputation for not being a good fit for cloud-native applications. Developers look for (and often choose) alternative frameworks such as Go and Node.js to support their cloud-native development requirements. Why learn another language when you can...</summary><dc:creator>jebeck</dc:creator><dc:date>2020-05-28T07:00:56Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/28/quarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat/</feedburner:origLink></entry><entry><title>How the fabric8 Maven plug-in deploys Java applications to OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FntGijRVla0/" /><category term="apache maven" scheme="searchisko:content:tags" /><category term="builder image" scheme="searchisko:content:tags" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="fabric8" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>kboone</name></author><id>searchisko:content:id:jbossorg_blog-how_the_fabric8_maven_plug_in_deploys_java_applications_to_openshift</id><updated>2020-05-28T07:00:00Z</updated><published>2020-05-28T07:00:00Z</published><content type="html">&lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://fabric8.io/"&gt;fabric8 Maven plug-in&lt;/a&gt;, often abbreviated FMP, can be added to a Maven Java project and takes care of the administrative tasks involved in deploying the application to a &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt; cluster. These tasks include:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Creating an OpenShift build configuration (BC).&lt;/li&gt; &lt;li&gt;Coordinating the source-to-image (S2I) process to create a container image from the application&amp;#8217;s compiled bytecode.&lt;/li&gt; &lt;li&gt;Creating and instantiating a deployment configuration (DC) from information in the project.&lt;/li&gt; &lt;li&gt;Defining and instantiating OpenShift services and routes.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;All of the relevant components of this process are well-documented individually. This article pulls together documentation sources to create an overview of how the plug-in works, and the structure of the image it generates—which might make the plug-in easier to use and troubleshoot.&lt;/p&gt; &lt;p&gt;&lt;span id="more-718217"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;A note about versions&lt;/h2&gt; &lt;p&gt;There are subtly-different upstream and Red Hat versions of the fabric8 Maven plug-in. They differ not only in how they are configured and used but also in the set-up required on OpenShift. In particular, the plug-in assumes that certain container images will be available in the OpenShift installation. The Red Hat and upstream versions make different assumptions in this regard.&lt;/p&gt; &lt;p&gt;This article focuses on the Red Hat version. The OpenShift setup for this plug-in is &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.5/html-single/fuse_on_openshift_guide/index#install-fuse-on-openshift3"&gt;documented here for OpenShift 3&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.5/html-single/fuse_on_openshift_guide/index#install-fuse-on-openshift4"&gt;here for OpenShift 4&lt;/a&gt;, although later versions might be available.&lt;/p&gt; &lt;p&gt;Not all of the documented setup is required simply to use the deployment plug-in—the mandatory part is installing the image streams. Of course, you might need the rest of the installation for other purposes.&lt;/p&gt; &lt;p style="padding-left: 40px"&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also check out this quick &lt;a href="https://developers.redhat.com/blog/2020/05/20/getting-started-with-the-fabric8-kubernetes-java-client/"&gt;Getting started with the fabric8 Kubernetes Java client&lt;/a&gt; article for more information.&lt;/p&gt; &lt;h2 style="text-align: left"&gt;Adding the plug-in to a Maven project&lt;/h2&gt; &lt;p style="text-align: left"&gt;To use the FMP in zero-configuration mode, just add the &lt;code&gt;plugin&lt;/code&gt; specification to a Maven &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;build&amp;#62; &amp;#60;plugins&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;groupId&amp;#62;org.jboss.redhat-fuse&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;fabric8-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${fuse.bom.version}&amp;#60;/version&amp;#62; &amp;#60;/plugin&amp;#62; &amp;#60;/plugins&amp;#62; ...&lt;/pre&gt; &lt;p style="text-align: left"&gt;Doing this makes the Maven operations &lt;code&gt;fabric8:deploy&lt;/code&gt;, &lt;code&gt;fabric8:build&lt;/code&gt;, etc., available. In order to make build and deployment a one-step operation, we can bind the various goals like this:&lt;/p&gt; &lt;pre&gt; &amp;#60;plugin&amp;#62; ... &amp;#60;executions&amp;#62; &amp;#60;execution&amp;#62; &amp;#60;id&amp;#62;fabric8&amp;#60;/id&amp;#62; &amp;#60;goals&amp;#62; &amp;#60;goal&amp;#62;resource&amp;#60;/goal&amp;#62; &amp;#60;goal&amp;#62;build&amp;#60;/goal&amp;#62; &amp;#60;/goals&amp;#62; &amp;#60;/execution&amp;#62; &amp;#60;/executions&amp;#62; &amp;#60;/plugin&amp;#62; ....&lt;/pre&gt; &lt;p style="text-align: left;padding-left: 40px"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Different versions of the Maven fabric8 plug-in have subtle differences in the dependencies between goals, and this binding configuration is not always needed.&lt;/p&gt; &lt;p style="text-align: left"&gt;In the zero-configuration mode of operations, the Maven fabric8 plug-in is (like everything else in Maven) &lt;em&gt;opinionated&lt;/em&gt;. This mode makes many assumptions about the structure of its input, and how it should operate. However, many configuration parameters are available to tune its behavior. For example, OpenShift resource limits can be set in the plug-in configuration in &lt;code&gt;pom.xml&lt;/code&gt; like this:&lt;/p&gt; &lt;pre&gt; &amp;#60;configuration&amp;#62; &amp;#60;resources&amp;#62; &amp;#60;openshiftBuildConfig&amp;#62; &amp;#60;limits&amp;#62; &amp;#60;cpu&amp;#62;100m&amp;#60;/cpu&amp;#62; &amp;#60;memory&amp;#62;256Mi&amp;#60;/memory&amp;#62; &amp;#60;/limits&amp;#62; &amp;#60;/openshiftBuildConfig&amp;#62; &amp;#60;/resources&amp;#62; &amp;#60;/configuration&amp;#62;&lt;/pre&gt; &lt;p style="text-align: left"&gt;An alternative approach to configuring the resulting OpenShift deployment is to include YAML fragments in the application source, as explained in the next section.&lt;/p&gt; &lt;h2 style="text-align: left"&gt;Starting a deployment&lt;/h2&gt; &lt;p style="text-align: left"&gt;In simple cases, we can initiate a full assembly and deployment to OpenShift like this:&lt;/p&gt; &lt;pre&gt;$ mvn fabric8:deploy&lt;/pre&gt; &lt;p style="text-align: left"&gt;After the regular Maven build, the fabric8 Maven plug-in creates (in due course) an OpenShift image and domain configuration. The DC specifies one replica (pod) by default. All of the OpenShift entities created will have names based on the Maven artifact ID in &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt; &lt;p style="text-align: left"&gt;Note that the plugin does not use the &lt;code&gt;oc&lt;/code&gt; command. However, unless we provide a specific configuration, fabric8 will use the information that &lt;code&gt;oc&lt;/code&gt; stores about the user credentials and OpenShift namespace. This information is typically stored in &lt;code&gt;$HOME/.kube/config&lt;/code&gt;. In practice, then, it is usual to run the Maven deployment after &lt;code&gt;oc login&lt;/code&gt; and &lt;code&gt;oc project&lt;/code&gt;.&lt;/p&gt; &lt;h2 style="text-align: left"&gt;The deployment process&lt;/h2&gt; &lt;p style="text-align: left"&gt;In outline, the FMP uses the binary source-to-image (binary S2I) process to create an OpenShift image containing the binaries supplied by the regular Maven build. In many cases, the application&amp;#8217;s binary will be a &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; &lt;em&gt;fat&lt;/em&gt; (self-contained) JAR. In such cases, the S2I process passes the fat JAR to a builder image, which creates a new image. This image contains the fat JAR, the JVM, and various scripts. Not all application types are supported by the plug-in result in a fat JAR. In some cases, the plug-in may have a more substantial assembly task before it can deploy anything to OpenShift.&lt;/p&gt; &lt;p style="text-align: left;padding-left: 40px"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;fabric8:deploy&lt;/code&gt; target implies &lt;code&gt;fabric8:build&lt;/code&gt;, &lt;code&gt;fabric8:resource&lt;/code&gt;, and &lt;code&gt;fabric8:apply&lt;/code&gt;.&lt;/p&gt; &lt;p style="text-align: left"&gt;The &lt;code&gt;fabric8:build&lt;/code&gt; step invokes OpenShift to generate an image stream for the application. The plug-in creates and installs an OpenShift build configuration (BC) whose name is the Maven artifact name with &lt;code&gt;-s2i&lt;/code&gt; appended. The BC specifies the base image for the build.&lt;/p&gt; &lt;p style="text-align: left"&gt;Examining a typical BC in YAML format, we see:&lt;/p&gt; &lt;pre&gt; strategy: sourceStrategy: from: kind: ImageStreamTag name: fuse7-java-openshift:1.5 namespace: openshift type: Source&lt;/pre&gt; &lt;p style="text-align: left"&gt;The BC indicates that OpenShift will build the image using the (binary) source-to-image strategy, with &lt;code&gt;fuse7-java-openshift&lt;/code&gt; as the builder image. This same builder image is used for all the fat-JAR project types.&lt;/p&gt; &lt;p style="text-align: left"&gt;When the plug-in has created the BC, it invokes a build on it. This results in a build pod being instantiated and executed. The build pod will have a name of the form:&lt;/p&gt; &lt;pre&gt; [artifact_id]-s2i-NNN-build &lt;/pre&gt; &lt;p style="text-align: left"&gt;where NNN is the build number. All being well, the build pod runs to completion and results in a new image. If this is the first build, it will create a new image stream for the image. However, the image cannot yet be instantiated into a pod, because there is no deployment configuration.&lt;/p&gt; &lt;p style="text-align: left"&gt;Regardless of the project type, by default, the application&amp;#8217;s compiled binaries end up in the generated pod&amp;#8217;s &lt;code&gt;/deployments&lt;/code&gt; directory. Other supporting infrastructure may also be placed in that directory if the project type requires it.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;fabric8:resource&lt;/code&gt; step generates the specific OpenShift resources needed to specify how the application is instantiated in a pod. These resources are written in YAML format and will always contain a deployment configuration. Other OpenShift resources, such as service definitions, can also be generated at this stage. The &lt;code&gt;fabric8:resource&lt;/code&gt; operation is primarily local &amp;#8212; it generates files in the project&amp;#8217;s &lt;code&gt;target/&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;fabric8:apply&lt;/code&gt; step takes the configuration generated by the &lt;code&gt;resource&lt;/code&gt; step and applies it to the OpenShift installation. The primary step here is the instantiation of the DC generated by the &lt;code&gt;resource&lt;/code&gt; step on OpenShift. This DC will have the same name as the Maven artifact, and specify the image generated by the builder as its container. This step should result in a single pod running the application.&lt;/p&gt; &lt;p&gt;It is a peculiarity of the S2I process that the image created by the builder is derived from the builder itself. The generated image will be almost an exact copy of the builder, with the addition of the executable application code and some configuration. As a result, the OpenShift images created by the FMP will contain a complete installation of Maven and a Java compiler, even though they will never be used. Various techniques are available for post-processing images to remove this unnecessary content.&lt;/p&gt; &lt;h2&gt;Generators&lt;/h2&gt; &lt;p&gt;The Maven fabric8 plug-in can produce images based on &lt;a href="https://developers.redhat.com/topics/spring-boot/"&gt;Spring Boot&lt;/a&gt;, Karaf, &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform (JBoss EAP)&lt;/a&gt;, plain Java, and other project types. Pluggable &lt;em&gt;generators&lt;/em&gt; are used to control the process of building OpenShift-ready binaries from the Maven project and providing the appropriate configuration. I will outline the Java, Spring Boot, and Karaf generators in particular because the similarities and differences between them are instructive.&lt;/p&gt; &lt;p&gt;Unless configured otherwise, all installed generators are available and will be activated through certain project features. For example, the Spring Boot generator is activated by the presence in the project of a &lt;code&gt;spring-boot-starter&lt;/code&gt; dependency. If none of the other, more specific generators are activated, the project may be treated as a plain Java executable. For a project to be treated as plain Java, it must produce a single JAR with a &lt;code&gt;Main-Class&lt;/code&gt; attribute in its manifest.&lt;/p&gt; &lt;p&gt;If the Maven project does not activate any generators, that mistake might not cause the build to fail, which can be rather confusing. The build might appear to succeed, yet not have any effect on OpenShift. As a result, you might see a warning message like this:&lt;/p&gt; &lt;pre&gt; [WARNING] F8: No image build configuration found or detected&lt;/pre&gt; &lt;p&gt;To some extent, the choice of generators can be controlled in configuration, if the plug-in does not select the correct one. Each generator has its own specific configuration that can be used to fine-tune its operation. Unless it is overridden in configuration, the generator will select the builder image to use.&lt;/p&gt; &lt;p&gt;At present all stand-alone Java applications, including Spring Boot, get &lt;code&gt;fuse7-java-openshift&lt;/code&gt; as the builder. Karaf- and EAP-applications get their own specific builders.&lt;/p&gt; &lt;h3&gt;Java generator&lt;/h3&gt; &lt;p&gt;Java is the most fundamental of all the supported project types. The generator can create a Maven deployment from any self-contained executable JAR file, creating a rudimentary DC that specifies a single replica (pod) with the rolling update strategy. The DC:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Exposes various ports: 9779 for the Prometheus monitoring tool and 8778 for the Jolokia JMX agent. These services are enabled by default in the generated image, as I will explain later.&lt;/li&gt; &lt;li&gt;Exposes port 8080, lacking any other configuration. It has no particular reason to do so, except that this is a popular port for applications that service HTTP requests.&lt;/li&gt; &lt;li&gt;Does not create liveness or readiness probes. The generator has no way to guess suitable values for these, if they even exist.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Spring Boot generator&lt;/h3&gt; &lt;p&gt;The Spring Boot generator is a specialization of the Java generator and shares most of the same configuration. Like the Java generator, the Spring Boot generator takes a fat JAR as its input. However, the Spring Boot generator is aware of certain conventions in the way Spring Boot applications are typically structured. It can thus provide a more effective DC for this type of application.&lt;/p&gt; &lt;p&gt;For example, if the &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt; dependency is included in the project, the generator assumes that the actuator health check endpoints can be used for liveness and readiness probes. The generated DC will contain the following additional configuration:&lt;/p&gt; &lt;pre&gt; readinessProbe: failureThreshold: 3 httpGet: path: /health port: 8080&lt;/pre&gt; &lt;p&gt;Port 8080 is the default, which might not be appropriate. If the actuator is enabled, the generator will also read &lt;code&gt;application.properties&lt;/code&gt; from the application&amp;#8217;s source, to determine if there is a setting like this:&lt;/p&gt; &lt;pre&gt;management.port=8081&lt;/pre&gt; &lt;p&gt;If this setting exists, it is used in the DC for the liveness/readiness probes. Other ports might be exposed in the DC if the Spring Boot configuration suggests them.&lt;/p&gt; &lt;p&gt;It should be clear that the Spring Boot generator relies on the developer following established conventions about source format. However, since the Spring Boot Maven build more-or-less enforces the use of these conventions, there is probably no additional work to do to use the plug-in.&lt;/p&gt; &lt;h3&gt;Karaf generator&lt;/h3&gt; &lt;p&gt;Unlike the Spring Boot and Java generators, the Karaf generator does not take a self-contained executable JAR as its input. Instead, it takes one or more OSGi bundles. These are still JAR files, but with specific OSGi-compliant meta-data that describes the interaction contract between the bundles.&lt;/p&gt; &lt;p&gt;OSGi applications need a supporting framework; that is the role played by Karaf.&lt;/p&gt; &lt;p&gt;The presence of specific metadata in the application JARs makes it impractical to deploy a single, self-contained JAR that also contains the Karaf framework. Instead, the Karaf generator copies an entire Karaf installation into &lt;code&gt;target/assembly/&lt;/code&gt;. It then transfers this setup to the generated image along with the application&amp;#8217;s JARs. All of this content ends up in the &lt;code&gt;/deployments&lt;/code&gt; directory, along with scripts for starting Karaf with the application&amp;#8217;s bundles.&lt;/p&gt; &lt;p&gt;The Karaf installation that is generated includes a general HTTP server on port 8181. This typically services not only application components, but also parts of the Karaf infrastructure. This port can be used for health checks, and the generated DC will specify liveness and readiness probes based on those health checks.&lt;/p&gt; &lt;h2&gt;Services and routes&lt;/h2&gt; &lt;p&gt;As we&amp;#8217;ve seen, the various generators will expose ports in the OpenShift DC, based either on information found by probing the project or on common defaults. These port assignments can be overridden in various ways, as explained in the FMP documentation.&lt;/p&gt; &lt;p&gt;However, merely exposing a port in the DC does not make the application available externally. For that, we need to create OpenShift services and routes. By default, FMP generators assume that there is a single web port that acts as the basis for a service and a route. For Karaf applications, the generator creates both the OpenShift DC &lt;em&gt;and&lt;/em&gt; the application&amp;#8217;s HTTP infrastructure. Consequently, the plug-in can always define a service correctly—provided, of course, that the developer actually wants to expose HTTP services.&lt;/p&gt; &lt;p&gt;The Spring Boot generator makes an assumption that the application will expose a single HTTP service, and it will either be on port 8080 or specified in &lt;code&gt;application.properties&lt;/code&gt;. Again, so long as there is one service, and it actually should be exposed, the generator will create the correct definition.&lt;/p&gt; &lt;p&gt;For plain Java projects, the generator just guesses that a service should be exposed on port 8080. If this setting isn&amp;#8217;t correct, you will need to override the generator&amp;#8217;s behavior or specify your own service definitions. Of course, it&amp;#8217;s possible to do this with the other generators as well.&lt;/p&gt; &lt;p&gt;Service definitions are generated in YAML format in the &lt;code&gt;target/classes/META-INF/&lt;/code&gt; directory during the &lt;code&gt;fabric8:resource&lt;/code&gt; step. They are installed on OpenShift during the &lt;code&gt;fabric8:apply&lt;/code&gt; step. Of course, these individual steps might well be subsumed into a single invocation of &lt;code&gt;fabric8:deploy&lt;/code&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Although the generated image will include Prometheus and Jolokia agents—each of which has an HTTP port—by default, these agents are not defined as services as they are used entirely in pod-to-pod communication.&lt;/p&gt; &lt;p&gt;By default the FMP creates services in such a way that they automatically create routes as well. The service definition that is instantiated contains the section:&lt;/p&gt; &lt;pre&gt; metadata: labels: expose: "true"&lt;/pre&gt; &lt;p&gt;The automatically created route will be unencrypted. This setup is often not what is required, and it&amp;#8217;s &lt;em&gt;definitely&lt;/em&gt; not what is required for any application that handles any other protocol than HTTP. Why? The OpenShift router cannot route other protocols without the Service Name Identification (SNI) information that is found in TLS-encrypted communications.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s possible to configure the FMP to create other kinds of routes, or no route at all. This capability is described in the &lt;a target="_blank" rel="nofollow" href="https://maven.fabric8.io/"&gt;fabric8 Maven plug-in documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Configuration using YAML fragments&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve seen how the FMP generates an OpenShift DC with sane defaults. However, it&amp;#8217;s often necessary to make at least slight modifications to the generated DC. To some extent, these modifications can be made to the plug-in configuration in &lt;code&gt;pom.xml&lt;/code&gt;, but a more flexible approach is to provide a complete or partial DC along with the application.&lt;/p&gt; &lt;p&gt;In most cases, providing a complete DC won&amp;#8217;t be convenient or appropriate. Instead, the FMP will merge a fragment of YAML code from the file &lt;code&gt;src/main/fabric8/deployment.yml&lt;/code&gt; into the DC it generates from the Maven project. Merging is done hierarchically: We can provide additions or modifications to multiple sections of the DC by placing the changes at the right point in the hierarchy.&lt;/p&gt; &lt;p&gt;Here is an example of a &lt;code&gt;deployment.xml&lt;/code&gt; that will specify resource limits for the pod:&lt;/p&gt; &lt;pre&gt; spec: template: spec: containers: - resources: requests: cpu: "0.2" memory: 128Mi limits: cpu: "1.0" memory: 512Mi&lt;/pre&gt; &lt;p&gt;Here is an example that sets an environment variable:&lt;/p&gt; &lt;pre&gt; spec: template: spec: containers: - env: - name: JAVA_OPTIONS value: '-verbose:gc'&lt;/pre&gt; &lt;p style="padding-left: 40px"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The YAML syntax is a bit fussy here. We often need to be careful to add to the relevant sections, rather than replacing them completely.&lt;/p&gt; &lt;p&gt;The ability to set environment variables in the DC can be important because the application does not directly control the JVM configuration—this is done by scripts in the generated image, as I will explain&lt;br /&gt; later.&lt;/p&gt; &lt;h2&gt;The generated image&lt;/h2&gt; &lt;p&gt;The generated image will contain the JVM, the application&amp;#8217;s binaries, any supporting infrastructure created by the FMP generator, and scripts to start the application. For the reasons I described earlier, it will also contain build tools that are not used at runtime, and which you will probably want to remove for production deployment.&lt;/p&gt; &lt;p&gt;For all project types, the image is configured to start execution by running the script:&lt;/p&gt; &lt;pre&gt;/usr/local/s2i/run&lt;/pre&gt; &lt;p&gt;The contents of this script vary according to the project type. For fat-JAR projects, the script will invoke:&lt;/p&gt; &lt;pre&gt;/opt/run-java/run-java.sh&lt;/pre&gt; &lt;p&gt;The&lt;code&gt;run-java.sh&lt;/code&gt; script is highly configurable using environment variables; but, unless a specific application is given, it will search the &lt;code&gt;/deployments&lt;/code&gt; directory for an executable JAR, and run that. The S2I process places the application&amp;#8217;s JAR in that directory when building the image.&lt;/p&gt; &lt;p&gt;The Karaf generator, by contrast, creates an image that executes:&lt;/p&gt; &lt;pre&gt;/deployments/karaf/bin/karaf&lt;/pre&gt; &lt;p&gt;That is, the image runs the Karaf framework, which loads the application&amp;#8217;s OSGi bundles.&lt;/p&gt; &lt;p&gt;Whatever the project type, JVM execution is controlled by environment variables. Although these variables are documented, the documentation is distributed across different sources, and it might be easier to log into the running pod and examine the scripts to see what configuration they accept. Then environment variables can be written into the DC as I explained above.&lt;/p&gt; &lt;p&gt;Regardless of the project type, the generated JVM invocation will, by default, install Java agents for the Prometheus monitoring framework, and for the Jolokia JMX agent. The operations for both these agents are controlled by configuration files in the builder image and are not easy to change. However, both of these agents are configured to be integrated into Red Hat&amp;#8217;s monitoring and management frameworks for OpenShift, so changing the configuration might be counterproductive anyway.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;run-java.sh&lt;/code&gt; script provides default JVM configuration settings that are broadly suitable for running in a container environment. It does some fairly complex interrogation of the container&amp;#8217;s resource limits to work out, for example, the number of garbage collector threads to allocate. No specific limits are set for JVM heap size; there is no &lt;code&gt;-Xmx&lt;/code&gt; setting, for example. This setup is usually appropriate in a container environment, where the JVM is the only process running in the container and will have access to all of the container&amp;#8217;s memory. However, it might sometimes be appropriate to fine-tune the heap management settings, such as by allocating different fractions of memory to different heap generations. These settings can be made through environment variables if necessary.&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;The fabric8 Maven plug-in automates a number of quite complex tasks and can accommodate many different Java-based applications. However, its operation is comprehensible if we break it down into individual steps.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#038;title=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/05/28/how-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift/" data-a2a-title="How the fabric8 Maven plug-in deploys Java applications to OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/28/how-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift/"&gt;How the fabric8 Maven plug-in deploys Java applications to OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FntGijRVla0" height="1" width="1" alt=""/&gt;</content><summary>The fabric8 Maven plug-in, often abbreviated FMP, can be added to a Maven Java project and takes care of the administrative tasks involved in deploying the application to a Red Hat OpenShift cluster. These tasks include: Creating an OpenShift build configuration (BC). Coordinating the source-to-image (S2I) process to create a container image from the application’s compiled bytecode. Creating and i...</summary><dc:creator>kboone</dc:creator><dc:date>2020-05-28T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/27/how-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift/</feedburner:origLink></entry><entry><title>Hot Rod URI</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HoCaD86v5PI/" /><category term="documentation" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-hot_rod_uri</id><updated>2020-05-30T05:59:06Z</updated><published>2020-05-26T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Traditionally, the Java Hot Rod client has always been configured either via a properties file or through a programmatic builder API.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;While both approaches offer a great amount of flexibility, they always felt a bit too complex for straightforward scenarios.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Starting with Infinispan 11 you will be able to specify the connection to an Infinispan Server via a URI, just like you’d connect to a database via a JDBC driver URL.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hot Rod URI allows you to specify the addresses of the server cluster, authentication parameters and any other property in a simple compact String format.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The URI specification is:&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;code&gt;hotrod[s]://[username:password]@host[:port][,host[:port]…​][?property=value[&amp;amp;property=value…​]]&lt;/code&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;the protocol can be either &lt;code&gt;hotrod&lt;/code&gt; (plain, unencrypted) or &lt;code&gt;hotrods&lt;/code&gt; (TLS/SSL, encrypted)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;if username and password are specified, they will be used to authenticate with the server&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;one or more addresses. If a port is not specified, the default &lt;code&gt;11222&lt;/code&gt; will be used&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;zero or more &lt;a href="https://docs.jboss.org/infinispan/11.0/apidocs/org/infinispan/client/hotrod/configuration/package-summary.html"&gt;properties&lt;/a&gt;, without the &lt;code&gt;infinispan.client.hotrod&lt;/code&gt; prefix, through which you can configure all other aspects such as connection pooling, authentication mechanisms, near caching, etc.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Here are some examples:&lt;/p&gt; &lt;/div&gt; &lt;div class="dlist"&gt; &lt;dl&gt; &lt;dt class="hdlist1"&gt;&lt;code&gt;hotrod://localhost&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;simple connection to a server running on &lt;code&gt;localhost&lt;/code&gt; using the default port&lt;/p&gt; &lt;/dd&gt; &lt;dt class="hdlist1"&gt;&lt;code&gt;hotrod://joe:secret@infinispan-host-1:11222,infinispan-host-2:11222&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;authenticated connection to &lt;code&gt;infinispan-host-1&lt;/code&gt; and &lt;code&gt;infinispan-host-2&lt;/code&gt; with explicit port&lt;/p&gt; &lt;/dd&gt; &lt;dt class="hdlist1"&gt;&lt;code&gt;hotrods://infinispan-host-1?socket_timeout=1000&amp;amp;connect_timeout=2000&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;TLS/SSL connection to &lt;code&gt;infinispan-host-1&lt;/code&gt; using the default port and with custom connection and socket timeouts&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The URI format can also be used as a starting point in your usual properties file or API configuration and further enriched using the traditional methods:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;infinispan.client.hotrod.uri=hotrod://joe:secret@infinispan-host-1:11222,infinispan-host-2:11222 infinispan.client.hotrod.connect_timeout=100 infinispan.client.hotrod.socket_timeout=100 infinispan.client.hotrod.tcp_keep_alive=true&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;ConfigurationBuilder builder = &lt;span class="keyword"&gt;new&lt;/span&gt; ConfigurationBuilder() .uri(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;hotrod://joe:secret@infinispan-host-1:11222,infinispan-host-2:11222&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;) .socketTimeout(&lt;span class="integer"&gt;100&lt;/span&gt;) .connectionTimeout(&lt;span class="integer"&gt;100&lt;/span&gt;) tcpKeepAlive(&lt;span class="predefined-constant"&gt;true&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We hope this makes configuration simpler.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Happy coding!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HoCaD86v5PI" height="1" width="1" alt=""/&gt;</content><summary>Traditionally, the Java Hot Rod client has always been configured either via a properties file or through a programmatic builder API. While both approaches offer a great amount of flexibility, they always felt a bit too complex for straightforward scenarios. Starting with Infinispan 11 you will be able to specify the connection to an Infinispan Server via a URI, just like you’d connect to a databa...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2020-05-26T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/05/26/hotrod-uri/</feedburner:origLink></entry><entry><title>Build a Go application using OpenShift Pipelines</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FDZe9k6dDBs/" /><category term="buildah" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Go" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="RESTful service" scheme="searchisko:content:tags" /><category term="Tekton" scheme="searchisko:content:tags" /><author><name>Don Schenck</name></author><id>searchisko:content:id:jbossorg_blog-build_a_go_application_using_openshift_pipelines</id><updated>2020-05-26T07:00:54Z</updated><published>2020-05-26T07:00:54Z</published><content type="html">&lt;p&gt;Go is an increasingly popular programming language, and frequently chosen for developing command-line utilities. Many tools used with &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; are written in &lt;a href="https://developers.redhat.com/blog/category/go/"&gt;Go&lt;/a&gt;, including the command-line interfaces (CLIs) for Tekton (&lt;code&gt;tkn&lt;/code&gt;), OpenShift (&lt;code&gt;oc&lt;/code&gt;), and Kubernetes (&lt;code&gt;kubectl&lt;/code&gt;). Also, developers can compile Go to a single executable for a broad range of operating systems. As a result, it&amp;#8217;s easy to develop and desk-test applications before putting them into containers and running those containers in OpenShift.&lt;/p&gt; &lt;p&gt;In a meta sort of way, this is an article about a tutorial, where I show you &lt;a target="_blank" rel="nofollow" href="https://redhat-developer-demos.github.io/openshift-pipelines-workshop"&gt;how to build and deliver a small Go RESTful service using OpenShift Pipelines&lt;/a&gt;. You could just jump to the tutorial now, but I suggest reading this article first. I&amp;#8217;ll quickly introduce the working environment for the tutorial, and I&amp;#8217;ll explain my logic for setting up the tutorial the way that I did.&lt;/p&gt; &lt;p&gt;&lt;span id="more-700937"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s included in the OpenShift Pipelines Workshop tutorial&lt;/h2&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://redhat-developer-demos.github.io/openshift-pipelines-workshop"&gt;OpenShift Pipelines Workshop tutorial&lt;/a&gt; includes two GitHub repositories. One repository contains the tutorial and two YAML files that you will use for the example application. The other repository contains the Go service that you will build. The tutorial also references the &lt;a target="_blank" rel="nofollow" href="https://github.com/openshift/pipelines-catalog"&gt;OpenShift Pipelines Catalog&lt;/a&gt;, an open source library of reusable pipeline assets. This catalog is an excellent example of the open source world and how it produces valuable community-wide solutions.&lt;/p&gt; &lt;p&gt;In the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/openshift-pipelines-workshop.git"&gt;tutorial repository&lt;/a&gt;, you&amp;#8217;ll find two YAML files: &lt;code&gt;qotd-pipeline.yaml&lt;/code&gt; and &lt;code&gt;sub.yaml&lt;/code&gt;. The &lt;code&gt;sub&lt;/code&gt; file creates the OpenShift Pipelines Operator, while &lt;code&gt;qotd-pipeline&lt;/code&gt; defines the pipeline to be used.&lt;/p&gt; &lt;p&gt;In the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/qotd.git"&gt;source code repository&lt;/a&gt;, you&amp;#8217;ll find the Go code for the service. You&amp;#8217;ll find a Dockerfile that you can use to create an image. You will also find three YAML files in the &lt;code&gt;/k8s&lt;/code&gt; directory. Those files define the &lt;code&gt;DeploymentConfig&lt;/code&gt;, &lt;code&gt;Service&lt;/code&gt;, and &lt;code&gt;Route&lt;/code&gt; that you will create. Keeping those artifacts in the same repo as the source code makes sense, and it puts all the related pieces in one, easily accessible spot.&lt;/p&gt; &lt;h2&gt;The build environment&lt;/h2&gt; &lt;p&gt;OpenShift Pipelines relies on Tekton, which is Knative&amp;#8217;s container-based build component. Tekton uses tasks to get work done, such as building the Linux Open Container Initiative (OCI)-compliant image. In this case, I call the image &amp;#8220;OCI-compliant&amp;#8221; because we don&amp;#8217;t use the &lt;code&gt;docker&lt;/code&gt; command to build anything. Instead, we&amp;#8217;ll use the open source &lt;code&gt;buildah&lt;/code&gt; system. The &lt;code&gt;buildah&lt;/code&gt; task is contained in the aforementioned OpenShift Pipelines Catalog and is included when you install the OpenShift Pipelines Operator. This is one of several cluster-wide tasks we&amp;#8217;ll use for this project. You can see a list of all the tasks by running &lt;code&gt;tkn clustertask ls&lt;/code&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;About OCI&lt;/strong&gt;: &lt;a target="_blank" rel="nofollow" href="https://www.opencontainers.org/about"&gt;Open Container Initiative (OCI)&lt;/a&gt; is an open governance structure for creating open industry standards around container formats and runtimes. OCI says, &amp;#8220;build an image according to these standards, and it&amp;#8217;ll run as promised.&amp;#8221;&lt;/p&gt; &lt;h3&gt;What&amp;#8217;s great about buildah&lt;/h3&gt; &lt;p&gt;&lt;code&gt;buildah&lt;/code&gt; puts you in control of what gets built and how it&amp;#8217;s built. As an example, I have a Dockerfile in my source code, and I can use that to build and desk-test code on my local machine, regardless of the operating system I am using. When I move everything to OpenShift and use the pipeline, I can use the same Dockerfile to perform the build. I can rest assured (no pun intended) that the created executable and image will match what&amp;#8217;s on my machine. No more, &amp;#8220;but it worked on my machine.&amp;#8221; Using &lt;code&gt;buildah&lt;/code&gt;, I can deploy my code at 4:59 p.m. Friday and go home without another worry. (I added that last sentence just to get the folks in Operations riled up.)&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This quick article has been an introduction to my longer tutorial. Now you know where to find the components you need and why I put them there. It&amp;#8217;s time to head over to the &lt;a target="_blank" rel="nofollow" href="https://redhat-developer-demos.github.io/openshift-pipelines-workshop"&gt;GitHub workshop&lt;/a&gt; and get started with the tutorial!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#038;title=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" data-a2a-url="https://developers.redhat.com/blog/2020/05/26/build-a-go-application-using-openshift-pipelines/" data-a2a-title="Build a Go application using OpenShift Pipelines"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/26/build-a-go-application-using-openshift-pipelines/"&gt;Build a Go application using OpenShift Pipelines&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FDZe9k6dDBs" height="1" width="1" alt=""/&gt;</content><summary>Go is an increasingly popular programming language, and frequently chosen for developing command-line utilities. Many tools used with Kubernetes and Red Hat OpenShift are written in Go, including the command-line interfaces (CLIs) for Tekton (tkn), OpenShift (oc), and Kubernetes (kubectl). Also, developers can compile Go to a single executable for a broad range of operating systems. As a result, i...</summary><dc:creator>Don Schenck</dc:creator><dc:date>2020-05-26T07:00:54Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/26/build-a-go-application-using-openshift-pipelines/</feedburner:origLink></entry><entry><title>Infinispan 11.0.0.CR1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EBThKIKXcdA/" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_11_0_0_cr1</id><updated>2020-05-30T05:59:06Z</updated><published>2020-05-25T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Dear Infinispan community,&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;we’ve just released 11.0.0.CR1 which comes loaded with quite a few features and improvements.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_cross_site_replication_improvements"&gt;&lt;a class="anchor" href="#_cross_site_replication_improvements" /&gt;Cross-Site Replication Improvements&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The cross-site replication feature received two major improvements:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Support for multiple site masters&lt;/p&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The new algorithm is able to take advantage of multiple site masters, distributing load between them. If your environment is capable, increase the number of site masters in RELAY2 configuration:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="xml"&gt;&lt;span class="tag"&gt;&amp;lt;relay.RELAY2&lt;/span&gt; &lt;span class="attribute-name"&gt;site&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;LON&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;max_site_masters&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;1000&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Conflict detection and resolution for Asynchronous Cross-Site Replication&lt;/p&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Taking advantage of vector clocks, in asynchronous mode, Infinispan is able to detect conflicts. A conflict happens when 2 or more sites update the same key at the same time. Conflicts are resolved based on the site’s names. Updates from the site lexicographically lower, take priority, in case of conflicts. As an example, if you have 3 sites, LON, NYC and SFO, conflicts between LON and NYC discards updates from NYC and keeps the updates from LON. You can choose the priority by prepending a number to the site name. For example, if you want updates from NYC to take priority, you can set the site name to “1-NYC”.&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In a future update, Infinispan will allow you to set a custom conflict resolution algorithm.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_non_blocking_internals"&gt;&lt;a class="anchor" href="#_non_blocking_internals" /&gt;Non-blocking internals&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All thread pools collapsed into two pools: blocking and non-blocking&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_persistence"&gt;&lt;a class="anchor" href="#_persistence" /&gt;Persistence&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A new non-blocking Store SPI&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_clustering"&gt;&lt;a class="anchor" href="#_clustering" /&gt;Clustering&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;More accurate segment rebalancing&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scaling without state-transfer (experimental)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_queryindexing"&gt;&lt;a class="anchor" href="#_queryindexing" /&gt;Query/Indexing&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;SearchManager, CacheQuery are deprecated. Users are encouraged to migrate to Ickle String queries obtained from Search.getQueryFactory&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_server_security"&gt;&lt;a class="anchor" href="#_server_security" /&gt;Server Security&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The server is now secure by default&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New encrypted properties realm&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Simplified authentication and authorization configuration to be as automatic as possible&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_other_server_changes"&gt;&lt;a class="anchor" href="#_other_server_changes" /&gt;Other Server changes&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Datasources&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Runtime logging configuration&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Server report&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_cli"&gt;&lt;a class="anchor" href="#_cli" /&gt;CLI&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;User Tool merged into CLI&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CLI can be compiled natively&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Non-interactive usage&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_console"&gt;&lt;a class="anchor" href="#_console" /&gt;Console&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Lots of UX improvements&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_kubernetesopenshift_operator"&gt;&lt;a class="anchor" href="#_kubernetesopenshift_operator" /&gt;Kubernetes/OpenShift operator&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cache CR&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Service .Expose with Ingress and Route&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_container_images"&gt;&lt;a class="anchor" href="#_container_images" /&gt;Container images&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Images based upon ubi-minimal:8.2&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Native generation of config files in all images&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Native server image available at &lt;code&gt;infinispan/server-native&lt;/code&gt; (Experimental)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_documentation"&gt;&lt;a class="anchor" href="#_documentation" /&gt;Documentation&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Added procedural content for rolling upgrades, Cache CR with the Operator, server patching, misc CLI commands, using RemoteCacheConfigurationBuilder.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Procedural content for different upgrade and migration tasks included in Upgrade Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Operator and Spring Boot Starter guides now provide stable and development versions from the index page.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updated index.html and throughout documentation to improve high-level context and aid retrievability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Getting Started content updated and streamlined.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Applied several modifications, additions, and removals to documentation via community feedback.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_get_it_use_it_ask_us"&gt;&lt;a class="anchor" href="#_get_it_use_it_ask_us" /&gt;Get it, Use it, Ask us!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please &lt;a href="https://infinispan.org/download/"&gt;download&lt;/a&gt;, &lt;a href="https://issues.jboss.org/projects/ISPN"&gt;report bugs&lt;/a&gt;, &lt;a href="https://infinispan.zulipchat.com/"&gt;chat with us&lt;/a&gt;, ask questions on &lt;a href="https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EBThKIKXcdA" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispan community, we’ve just released 11.0.0.CR1 which comes loaded with quite a few features and improvements. Cross-Site Replication Improvements The cross-site replication feature received two major improvements: Support for multiple site masters The new algorithm is able to take advantage of multiple site masters, distributing load between them. If your environment is capable, increas...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2020-05-25T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/05/25/infinispan-11/</feedburner:origLink></entry></feed>
